-- Creating a table named employees with columns for ID, first name, last name, and salary
CREATE TABLE employees (
    employee_id NUMBER PRIMARY KEY, -- employee_id as a primary key to uniquely identify each employee
    first_name VARCHAR2(50),        -- first_name column to store the employee's first name
    last_name VARCHAR2(50),         -- last_name column to store the employee's last name
    salary NUMBER(10, 2)            -- salary column to store the employee's salary with 2 decimal places
);



-- Creating a function to get an employee's salary based on their employee_id
CREATE OR REPLACE FUNCTION get_employee_salary (p_employee_id NUMBER) -- Define function with a parameter for employee ID
RETURN NUMBER -- Specify that the function will return a NUMBER value
IS
    v_salary NUMBER; -- Declare a variable to store the retrieved salary
BEGIN
    -- Select the salary of the employee with the given ID
    SELECT salary INTO v_salary
    FROM employees
    WHERE employee_id = p_employee_id;
    
    RETURN v_salary; -- Return the retrieved salary
EXCEPTION
    WHEN NO_DATA_FOUND THEN -- Exception handling if the employee ID does not exist
        RETURN NULL; -- Return NULL if no data is found for the employee ID
END;
/



-- Creating a procedure to update an employee's salary based on a percentage increase
CREATE OR REPLACE PROCEDURE update_employee_salary (
    p_employee_id NUMBER, -- Input parameter for employee ID
    p_percentage_increase NUMBER -- Input parameter for percentage increase
)
IS
    v_salary NUMBER; -- Declare a variable to store the employee's current salary
BEGIN
    -- Attempt to retrieve the employee's current salary
    SELECT salary INTO v_salary
    FROM employees
    WHERE employee_id = p_employee_id;
    
    -- Calculate the new salary by applying the percentage increase
    v_salary := v_salary * (1 + p_percentage_increase / 100);
    
    -- Update the salary in the employees table with the new value
    UPDATE employees
    SET salary = v_salary
    WHERE employee_id = p_employee_id;
    
    COMMIT; -- Commit the transaction to save the changes
EXCEPTION
    WHEN NO_DATA_FOUND THEN -- Exception handling if the employee ID does not exist
        -- Raise an application error if the employee ID is not found
        RAISE_APPLICATION_ERROR(-20001, 'Employee does not exist');
END;
/




-- Insert sample data into the employees table for testing
INSERT INTO employees (employee_id, first_name, last_name, salary) 
VALUES (1, 'John', 'Doe', 50000); -- Adding an employee with ID 1, name John Doe, and salary 50000

INSERT INTO employees (employee_id, first_name, last_name, salary) 
VALUES (2, 'Jane', 'Smith', 60000); -- Adding an employee with ID 2, name Jane Smith, and salary 60000

COMMIT; -- Commit the data insertion to save the records in the table




-- Declare a block to test the get_employee_salary function
DECLARE
    v_salary NUMBER; -- Variable to store the retrieved salary
BEGIN
    -- Call the get_employee_salary function with employee ID 1
    v_salary := get_employee_salary(1);
    
    -- Display the salary of the employee in the console output
    DBMS_OUTPUT.PUT_LINE('Salary of employee 1: ' || v_salary);
END;
/




-- Declare a block to test the update_employee_salary procedure
BEGIN
    -- Call the procedure to increase the salary of employee ID 1 by 10%
    update_employee_salary(1, 10); -- Pass employee ID and percentage increase as arguments
    
    -- Display the updated salary of the employee in the console output
    DBMS_OUTPUT.PUT_LINE('Updated salary of employee 1: ' || get_employee_salary(1));
END;
/
